// automatically generated by the FlatBuffers compiler, do not modify

package e6.flatbuffers.addressChunk;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Chunk extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Chunk getRootAsChunk(ByteBuffer _bb) { return getRootAsChunk(_bb, new Chunk()); }
  public static Chunk getRootAsChunk(ByteBuffer _bb, Chunk obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Chunk __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte vectorsType(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int vectorsTypeLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector vectorsTypeVector() { return vectorsTypeVector(new ByteVector()); }
  public ByteVector vectorsTypeVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer vectorsTypeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer vectorsTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public Table vectors(Table obj, int j) { int o = __offset(6); return o != 0 ? __union(obj, __vector(o) + j * 4) : null; }
  public int vectorsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public UnionVector vectorsVector() { return vectorsVector(new UnionVector()); }
  public UnionVector vectorsVector(UnionVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createChunk(FlatBufferBuilder builder,
      int vectorsTypeOffset,
      int vectorsOffset) {
    builder.startTable(2);
    Chunk.addVectors(builder, vectorsOffset);
    Chunk.addVectorsType(builder, vectorsTypeOffset);
    return Chunk.endChunk(builder);
  }

  public static void startChunk(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addVectorsType(FlatBufferBuilder builder, int vectorsTypeOffset) { builder.addOffset(0, vectorsTypeOffset, 0); }
  public static int createVectorsTypeVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startVectorsTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addVectors(FlatBufferBuilder builder, int vectorsOffset) { builder.addOffset(1, vectorsOffset, 0); }
  public static int createVectorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVectorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endChunk(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishChunkBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedChunkBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Chunk get(int j) { return get(new Chunk(), j); }
    public Chunk get(Chunk obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

